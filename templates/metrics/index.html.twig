{% extends "base.html.twig" %}

{% block title %}Metrics{% endblock %}

{% block body %}
    <main>
        <h1>Metrics</h1>
        <h2>Introduktion</h2>
        <p>Inom mjukvaruutveckling fungerar de 6 C:na som riktlinjer för kodkvalitet.</p>
        <p><b>Codestyle</b>. Codestyle handlar om att man ska följa en tydligt definierad kodstandard. I kursen används PHP-CS-Fixer för att så smidigt som möjligt formattera kod som möjligen bryter mot kodstandarden.</p>
        <p><b>Coverage</b>. Coverage handlar om hur stor del av koden som täcks av tester. Desto mer täckning man har, desto bättre. Detta gör att man enkelt kan se om någon ändring orsakar fel. I mitt projekt är total coverage endast 21% enligt scrutinizer. Men detta kommer sig främst av att Controller-filerna inte har tester, vilket resulterar i många otestade kodrader. Ser man till filerna i Card eller Game så är täckningen 100%.</p>
        <p><b>Complexity</b>. Complexity handlar om koplexiteten för koden. Sådant som if- eller switch-satser och for- och while-loopar ökar komplexitet och gör generellt koden svårare att förstå och testa. Desto fler vägar som exekverad kod kan ta, desto högre komplexitet får man. I mitt projekt den genomsnittliga cyklomatiska komplexiteten 4.89 per klass. Det finns två filer ("App\Controller\CardController" & "App\Controller\ApiControllerKmom02") med cykl. komplexiteten på 10, vilket generellt är för högt. Övriga filer hamnar på högst 4, vilket är okej. En generell riktlinje är att man inte vill överskrida 5 i cykl. komplexitet.</p>
        <p><b>Cohesion</b>. Cohesion handlar om kodens sammanhållning. God sammanhållning innebär att klasser och funktioner har tydliga syften. Det handlar om att logiskt bygga upp och fördela kod. I report-projektet kan man som exempel ta "Game/" där jag försökt få en sammanhållning för spelet 21. GameState-klassen har han om spelets logik, och Player-klassen har hand om en spelare. Med PhpMetrics får man en analys av "Lack of cohesion of methods" eller LCOM. LCOM mäter "ansvar" hos en klass. Man vill ha en låg LCOM, där 1 är bra och allt över är mindre bra. I report-projektet har jag 6 klasser där LCOM hamnar på 2, vilket är en indikator på att de skulle kunna delas upp. Den genomsnittliga LCOM:en för projektet är 1.21.</p>
        <p><b>Coupling</b>. Coupling handlar om hur olika delar av kod beror på andra delar av kod. Generellt vill man ha låg koppling, då det gör att koden blir lättare att testa och att den är mer flexibel och återanvändbar. Man kan skilja på inkommande kopplingar (afferent coupling (AC)) och utgående kopplingar (efferent coupling (EC)). Hög AC innebär att många andra klasser anropar klassen, vilket tyder på att den är central, viktig och känslig för ändringar. Hög EC innebär att en klass använder och är beroende av många andra externa klasser, vilket tyder på att klassen kan vara svår att testa och underhålla. Denna statistik är generellt nyttig för att få ett grep om vad som har stor vikt i ett projekt. Till exempel från report-projektet kan man se att "App\Card\Card" har högsta AC på 4, vilket tyder på att den har stor vikt för andra klasser. Man kan även se att App\Controller\ApiControllerKmom02 har ett högt EC vilket tyder på att denna klass är starkt beroende av andra klasser och man kanske bör fundera på om den bör vara så komplex.</p>
        <p><b>CRAP</b>. CRAP (Change Risk Anti-Pattern) är ett sammansatt index av komplexitet och täckning där man vill försöka identifiera riskabel kod. Formeln för att beräkna ett CRAP-värde är: comp^2 * (1 - coverage)^3 + comp, där comp = komplexiteten. Eftersom minsta komplexitet man kan ha är 1, så kommer det lägsta möjliga CRAP-värde enligt formeln vara 1. Generellt vill man inte hamna över 30 i CRAP-värde. Som ett exempel har GameState-klassen ett CRAP-värde på 15, där täckningen är 100%. Det betyder att det höga värdet beror på komplexiteten. </p>
        <h2>PhpMetrics</h2>
        <p>Från PhpMetrics kan man se att det finns två klasser som har särskillt hög komplexitet. Dessa är CardController-klassen och ApiControllerKmom02-klassen. Båda har dessutom höga utgående kopplingar, alltså att de beror på många olika utomstående klasser. De båda har även ett högt antal "logical lines of code". Allt tyder på att dessa klasser skulle behöva ses över.</p>
        <p>För att öka coverage överlag, kan det vara bra att lägga in mer testning. Till exempel skulle Library-klassen kunna testas.</p>
        <p>Bilden nedan visar underhållbarhet/komplexitet. Där stora röda cirklar är svåra att underhålla. </p>
        <img class = "lucky-img" src="{{ asset('img/maintainability.png') }}" alt="">
        <p>De två stora röda cirklarna som syns i bilden är ApiControllerKmom02-klassen och CardController-klassen.</p>

        <h2>Scrutinizer</h2>
        <div class = "badges">
            <a href="https://scrutinizer-ci.com/g/lvndquist/mvc/?branch=main">
                <img src="https://scrutinizer-ci.com/g/lvndquist/mvc/badges/quality-score.png?b=main" alt="Scrutinizer Code Quality">
            </a>

            <a href="https://scrutinizer-ci.com/g/lvndquist/mvc/?branch=main">
                <img src="https://scrutinizer-ci.com/g/lvndquist/mvc/badges/coverage.png?b=main" alt="Code Coverage">
            </a>

            <a href="https://scrutinizer-ci.com/g/lvndquist/mvc/build-status/main">
                <img src="https://scrutinizer-ci.com/g/lvndquist/mvc/badges/build.png?b=main" alt="Build Status">
            </a>
        </div>
        <p>Scrutinizer ger ett kod-betyg på 9.74. Sett till koden, så är det samma problem som kunde identifieras med PhpMetrics, det vill säga hög komplexitet i ApiControllerKmom02-klassen och CardController-klassen. Dessutom är täckningen relativt låg på 20.7%. Ett visst antal problem/issues identifieras också så som oanvänd kod.</p>
        <h2>Förbättringar</h2>
        <p>Jag tänker först och främst att jag börjar med de enklare sakerna som issues som rapporteras via scrutinizer.</p>
        <p>Därefter behöver komplexiteten i ApiControllerKmom02-klassen och CardController-klassen minskas, vilket förmodligen kommer innebära att ännu en klass tillkommer för att hantera kort utanför Controller-klasserna.</p>
        <p>Efter det kan det vara värt att lägga in lite mer tester för att få lite bättre täckning överlag, förmodligen testar jag Library-klassen till en början.</p>
        <h3>Innan & efter</h3>
        <p><b>Täckta rader:</b> 129 till 132</p>
        <p><b>Totala rader:</b> 622 till 509</p>
        <p><b>Täckning:</b> 20.7% till 30%</p>
        <p><b>CardController komplexitet:</b> 31 till 16</p>
        <p><b>ApiControllerKmom02 komplexitet:</b> 31 till 16</p>
        <p><b>Genomsnittlig cyklomatisk komplexitet per klass:</b> 4.89 till 4.00</p>
        <p>Det blev lite bättre efter ändringarna, men vad gäller komplexiteten så kändes det mest som att jag flyttade logiken till en annan plats och gjorde den klassen mer komlplex, men det är väl lite så det kan bli om man inte effektiviserar logiken riktigt. Jag fick bort de issues som jag kände att jag kunde rå på, men det finns fortfarande två issues i kernel.php och .php-cs-fixer.dist.php som jag inte kände för att hålla på i. En testfil tillkom för att testa Library-klassen, vilket höjde täckningen med några procentenheter.</p>
        <h2>Diskussion</h2>
        <p>Det kändes lite sådär att gå tillbaka ända till kmom02 för att fixa där, och jag tror att det bästa är att man försöker analysera så ofta som möjligt, när man känner att man är klar med en klass till exempel. Det blir ju lite riskabelt att gå tillbaka långt och ändra saker som kanske används i andra saker, och då riskera att förstöra där, speciellt i det här fallet när jag inte har testfall för alla kontroller-klasser.</p>
        <p class = "end">Det bästa är väl om man redan är medveten om "clean code", och försöker jobba på ett sätt där man redan från början strukturerar och funderar på hur koden bör fungera - på ett rent sätt. Om man redan från start tar i hänsyn sådant som komplexitet och täckning så slipper man gå tillbaka senare och skriva om koden. Det kanske tar lite längre tid att programmera på det här sättet, men samtidigt sparar man på att skriva om massa kod i efterhand för att få den "clean".</p>
    </main>
{% endblock %}
