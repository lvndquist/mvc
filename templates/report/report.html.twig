{% extends "base.html.twig" %}

{% block title %}Home{% endblock %}

{% block body %}
    <main>
        <article>
            <header>
                <h1>Redovisning av kursmoment i kursen mvc (DV1608)</h1>
            </header>
            <section>
                <ul class = "report-list">
                    <li><a href = "#kmom01">Kmom01</a></li>
                    <li><a href = "#kmom02">Kmom02</a></li>
                    <li><a href = "#kmom03">Kmom03</a></li>
                    <li><a href = "#kmom04">Kmom04</a></li>
                    <li><a href = "#kmom05">Kmom05</a></li>
                    <li><a href = "#kmom06">Kmom06</a></li>
                    <li><a href = "#kmom10">Kmom10</a></li>
                </ul>
            </section>

            <section id = "kmom01">
                <h2>Kmom01</h2>
                <p>Nu kommer jag direkt från kursen, oopython. Så objektorienteringen finns färsk i minnet. I övrigt har jag sedan tidigare även jobbat objektorienterat i språk som Java, Javascript, och C++. Det ska bli intressant att se hur det fungerar med PHP.</p>

                <p>En klass är en mall som man kan skapa objekt från. Till exempel, om vi har en bil-klass så kan vi använda denna för att skapa objekt av typen bil. Objektet kan sedan ha metoder och attribut. En bil skulle kunna ha en metod: <code>unlock()</code>, och en attribut <code>licencePlate</code>.</p>
                <p>I PHP finns kapslas metoder or attribut in med hjälp av <code>public</code>, <code>private</code>, och <code>protected</code>. Dessa begränsar hur saker och ting kan nås relativt till klassen. <code>public</code> metoder och attribut kan nås överallt, <code>private</code> innebär att man begränsar metoden eller attributet till klassen, och <code>protected</code> begränsar till klassen och möjliga klasser i klassen.
                <p>Via arv kan en klass få tillgång till metoder från en annan klass. Vi kan till exempel ha en fordonsklass och en bilklass, där bilklassen kan ärva från fordonsklassen. I detta sammanhang går det även att överlagra metoder, där man vill ha samma metod men med ett annat anpassat beteende beroende på klass.</p>
                <p>Jag hade inga större problem med strukturen, och jag kände att jag ganska snabbt kom igång. Dock känns det som att det kan bli en del att hålla koll på när man jobbar mer med det. Jag får även intrycket att det inte rör sig om något så "light-weight", när jag kopierade över strukturen från kmom01 så var mappen 120MB.</p>
                <p>Jag skulle inte påstå att jag dök ner allt för djupt i "PHP The Right Way", men vad jag såg kan den bli användbar när det är något jag funderar på hur man gör. Något jag minns från webtec-kursen, var att jag inte fullt greppade PDO, vilket jag såg att artikeln tog upp. Jag hoppas att det kommer tillfälle att sätta sig in lite djupare i detta denna gång.</p>
                <p><b>TIL: </b> det blev inte egentligen inte allt för mycket nytt detta moment, men jag antar generellt syntax:en för klasser och objekt i PHP, som jag inte jobbat med tidigare.</p>
            </section>

            <section id = "kmom02">
                <h2>Kmom02</h2>
                <p><b>Arv</b>: en klass kan ärva olika egenskaper från en annan klass. Som exempel, en klass Animal kan ha en funktion för vilket läte djuret har. Har man sedan en klass Elefant, så har elefanten ett eget läte men det är fortfarande ett djur. Med arv kan man smidigt återanvända djurklassen och definiera ett specifik läte för ett specifik djur.</p>
                <p><b>Komposition</b>: en klass kan bestå/använda andra klasser/objekt inom ramen av sig själv. Som exempel, har vi en kort-klass, så kan vi i en hand-klass använda kort-klassen för att bygga upp en hand.</p>
                <p><b>Interface</b>: ett interface definierar vilka metoder som en klass ska implementera. Själva interfacet implementerar inte koden, men det berättar vad vi förväntar oss av en klass.</p>
                <p><b>Trait</b>: ett trait används för att återanvända diverse metoder mellan klasser, utan att man behöver använda arv. Man kan tänka sig att koden som definieras i ett trait kopieras in i klassen som använder trait:et.</p>
                <p>Efter att jag ritat UML-diagrammet var det inte så svårt att implementera koden. Det som tog mest tid var att komma ihåg php:s syntax, så i någon mån blev det lite hackigt när man måste hoppa fram och tillbaka mycket mellan att skriva och läsa dokumentationen.</p>
                <p>Huvudsakliga logiken hamnade i <b>CardController</b>. För session, så la jag in kontroller för att se om session redan finns eller inte. Om det inte finns ett kortspel eller en hand så genereras det. Man kan även använda /card/deck/shuffle för att blanda och skapa en ny kortlek och hand i sessionen.</p>
                <p>När det kom till api-routes så blev det mest repitition, och jag tänker att jag skulle kunna bryta ut en hel del från api-kontrollern och card-kontrollern för att få koden mer DRY. Men i och med att det inte är så mycket kod ännu så fungerar det ändå helt okej som jag implementerat det nu.</p>
                <p>Jag hade en hel del problem med att få bilder att ladda in rätt med encore. Av någon anledning så vill bilderna laddas in från /build/build när jag använder url() i css-filerna. För att lösa det fick jag använda style-tag:en direkt på html-elementen för att sätta bakgrunden när jag visar korten. Jag är ändå rätt nöjd över resultatet, då jag la en del tid på att få den grafiska representationen att se bra ut med sprites.</p>
                <p>MVC känns rätt bra, det enda är att det blir rätt mycket att hålla koll på med symphony, men med lite mer övning så ska det nog gå bra.</p>
                <p><b>TIL: </b>CSS-sprites. Jag har aldrig jobbat med sprites så det var lite klurigt att få till det, men ändå roligt att se resultatet.</p>
            </section>

            <section id = "kmom03">
                <h2>Kmom03</h2>
                <p>Att göra ett flödesdiagram kändes rätt användbart, det tvingade mig att fundera lite extra på hur man kunde gå till väga. Psuedokoden kändes kanske lite mindre användbar eftersom logiken i klasserna redan var rätt simpel, så det kändes lite överflödigt. Har man lite mer komplex logik kan jag dock se att det blir användbart.</p>
                <p>Jag använde de kortklasser som jag definierade i kmom02 för att implementera spelet. Jag valde att skapa en <code>GameState</code> klass för att hålla själva spelet och majoriteten av logiken. <code>Player</code> klassen innehåller spelare, och används i <code>GameState</code>. Till en början tänkte jag att jag ville ha en klass för spelare och en för bank men det kändes som att det blev lite överflödigt då banken egentligen bara är en spelare också.</p>
                <p>Jag gjorde ett flödesdiagram som representerar GameState och dess logik. Jag försökte begränsa koden i min kontroller, till att i princip bara hantera sessionen och sköta rendering/omdirigering.</p>
                <p>21 som spel är ju ganska simpelt så det finns väl inte jättemycket förbättringar utom att implementera de valfria delarna. I det fallet hade jag nog gärna separerat banken som en klass för att hålla <code>GameState</code> fortsatt lättläst.</p>
                <p>Symphony känns mer och mer okej att jobba med, men jag har en fortsatt känsla av att det finns lite väl mycket overhead för en ganska simpel webbsida.</p>
                <p><b>TIL: </b>Skulle nog säga flödesdiagram, då det var första gången jag gjorde ett, iallafall i programmeringssyfte.</p>
            </section>

            <section id = "kmom04">
                <h2>Kmom04</h2>
                <p>Att skriva tester är inte helt nytt, så testskrivandet kändes helt okej. Det blir ju även lite repetition när man skriver testerna i efterhand. Något jag tyckte extra mycket om med PHPUnit var coverage-rapporten som generarades. Kändes väldigt nyttigt att få saker visualiserade.</p>
                <p>I slutändan fick jag 100% coverage, men det tog lite fundering. Jag fick lägga till en metod för att kunna sätta poäng för spelare/bank, utan att det görs via en dragning eller när banken ska spela.</p>
                <p>Det blir ju lite svårt att testa när man har slumpmässighet. Sånt som blandning av kortlek blir lite svårt att testa. Jag känner att min bankdel var svårast att testa, så den kanske skulle kunna brytas upp i mindre delar eller helt enkelt en egen klass. Det går säkert att "mocka" för att göra testningen mindre slumpmässig, till exempel att man har ett fördefinierat deck att utgå ifrån eller liknande. Men i det här fallet räckte det med att "spoofa" poängen för att få full coverage.</p>
                <p>Jag skulle säga att testbar kod och "snygg och ren kod" är ganska synonyma. Ska man testa en koddel isolerat krävs det att den inte är beroende av för många andra koddelar, på så sätt får man också ett tydligt och enklare flöde att följa. Vilket i regel kännetecknar god design. Har man kod som gör för mycket saker så blir det svårt att testa, och detta indikerar att man kan dela upp koden i mindre bitar för att få testningen att bli enklare, vilket i sin tur blir renare och snyggare kod.</p>
                <p><b>TIL:</b> rent allmänt hur man gör testning med PHPUnit.</p>
            </section>

            <section id = "kmom05">
                <h2>Kmom05</h2>
                <p>Övningen gick bra. Jag gjorde övningen i report-mappen, men eftersom den utgick från "product" så blev det lite konstigt med namnvalet och jag valde därför att göra om allt från början med "library" istället. Det finns säkert något sätt att bara enkelt ändra namn, men det blev så här denna gång.</p>
                <p>På startsidan för library så finns det länkar till allt som man skulle implementera i uppgiften. Klickar man sig in på /show så får man en lite mer användarvänlig upplevelse. Man ser alla böcker i en tabell och kan välja att: visa detaljer, ändra eller ta bort en bok. Man kan även lägga till en ny bok. När man klickar sig in någonstans kan man enkelt gå ett steg tillbaka till vyn för alla böcker.</p>
                <p>Det var väl inte jättekonstigt att jobba med ORM. Jag gillar att man får en konkret objekdriven struktur på det hela. Jag gillar även att man kan skriva "ren" sql-kod i repository för att få mer specifika metoder. Att använda den specifika syntaxen som finns utkommenterad i repository-filen kändes kanske lite väl annorlunda och jag valde att hålla mig till sql-stilen. Rent allmänt att jobba med CRUD känns ganska vant vid det här laget, från det man gjort i de tidigare kurserna.</p>
                <p><b>TIL: </b>det får bli allmänt symphony och doctrine för att få till en databas. Databas och CRUD är ju inget nytt men själva "verktygen" var nya.</p>
            </section>
            <section id = "kmom06">
                <h2>Kmom06</h2>
                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque dui mauris, tempus ut scelerisque id, molestie pretium magna. Cras bibendum ante sed elementum ornare. In blandit elit ac felis faucibus, ut posuere justo porttitor. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Vestibulum a egestas lorem. Phasellus lacinia finibus neque, quis finibus risus convallis molestie. Donec eget ultrices velit. In ante massa, vestibulum mollis sagittis at, tincidunt id dolor. Sed vehicula magna eu mauris malesuada semper.</p>
                <p>Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Proin dui nibh, cursus ac ante ac, maximus sagittis eros. Cras congue posuere augue nec gravida. Aenean venenatis placerat magna vestibulum blandit. Suspendisse ac augue fringilla, efficitur velit imperdiet, euismod turpis. Nam varius nisi ullamcorper, euismod eros sit amet, tincidunt orci. Vestibulum justo ex, condimentum sit amet sodales at, venenatis vel dui. Vivamus gravida egestas turpis mattis euismod. Maecenas eget lorem tortor. Duis posuere dui consectetur, pretium urna in, laoreet libero. Integer vestibulum odio a arcu commodo dictum.</p>
            </section>

            <section id = "kmom10">
                <h2>Kmom10</h2>
                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque dui mauris, tempus ut scelerisque id, molestie pretium magna. Cras bibendum ante sed elementum ornare. In blandit elit ac felis faucibus, ut posuere justo porttitor. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Vestibulum a egestas lorem. Phasellus lacinia finibus neque, quis finibus risus convallis molestie. Donec eget ultrices velit. In ante massa, vestibulum mollis sagittis at, tincidunt id dolor. Sed vehicula magna eu mauris malesuada semper.</p>
                <p>Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Proin dui nibh, cursus ac ante ac, maximus sagittis eros. Cras congue posuere augue nec gravida. Aenean venenatis placerat magna vestibulum blandit. Suspendisse ac augue fringilla, efficitur velit imperdiet, euismod turpis. Nam varius nisi ullamcorper, euismod eros sit amet, tincidunt orci. Vestibulum justo ex, condimentum sit amet sodales at, venenatis vel dui. Vivamus gravida egestas turpis mattis euismod. Maecenas eget lorem tortor. Duis posuere dui consectetur, pretium urna in, laoreet libero. Integer vestibulum odio a arcu commodo dictum.</p>
            </section>
        </article>
    </main>
{% endblock %}
