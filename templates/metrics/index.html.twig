{% extends "base.html.twig" %}

{% block title %}Metrics{% endblock %}

{% block body %}
    <main>
        <h1>Metrics</h1>
        <h2>Introduktion</h2>
        <p>Inom mjukvaruutveckling fungerar de 6 C:na som riktlinjer för kodkvalitet.</p>
        <ul class = "metrics-ul">
            <li><b>Codestyle</b>. Codestyle handlar om att man ska följa en tydligt definierad kodstandard. I kursen används PHP-CS-Fixer för att så smidigt som möjligt formattera kod som möjligen bryter mot kodstandarden.</li>
            <li><b>Coverage</b>. Coverage handlar om hur stor del av koden som täcks av tester. Desto mer täckning man har, desto bättre. Detta gör att man enkelt kan se om någon ändring orsakar fel. I mitt projekt är total coverage endast 21% enligt scrutinizer. Men detta kommer sig främst av att Controller-filerna inte har tester, vilket resulterar i många otestade kodrader. Ser man till filerna i Card eller Game så är täckningen 100%.</li>
            <li><b>Complexity</b>. Complexity handlar om koplexiteten för koden. Sådant som if- eller switch-satser och for- och while-loopar ökar komplexitet och gör generellt koden svårare att förstå och testa. Desto fler vägar som exekverad kod kan ta, desto högre komplexitet får man. I mitt projekt den genomsnittliga cyklomatiska komplexiteten 4.89 per klass. Det finns två filer ("App\Controller\CardController" & "App\Controller\ApiControllerKmom02") med cykl. komplexiteten på 10, vilket generellt är för högt. Övriga filer hamnar på högst 4, vilket är okej. En generell riktlinje är att man inte vill överskrida 5 i cykl. komplexitet.</li>
            <li><b>Cohesion</b>. Cohesion handlar om kodens sammanhållning. God sammanhållning innebär att klasser och funktioner har tydliga syften. Det handlar om att logiskt bygga upp och fördela kod. I report-projektet kan man som exempel ta "Game/" där jag försökt få en sammanhållning för spelet 21. GameState-klassen har han om spelets logik, och Player-klassen har hand om en spelare. Med PhpMetrics får man en analys av "Lack of cohesion of methods" eller LCOM. LCOM mäter "ansvar" hos en klass. Man vill ha en låg LCOM, där 1 är bra och allt över är mindre bra. I report-projektet har jag 6 klasser där LCOM hamnar på 2, vilket är en indikator på att de skulle kunna delas upp. Den genomsnittliga LCOM:en för projektet är 1.21.</li>
            <li><b>Coupling</b>. Coupling handlar om hur olika delar av kod beror på andra delar av kod. Generellt vill man ha låg koppling, då det gör att koden blir lättare att testa och att den är mer flexibel och återanvändbar. Man kan skilja på inkommande kopplingar (afferent coupling (AC)) och utgående kopplingar (efferent coupling (EC)). Hög AC innebär att många andra klasser anropar klassen, vilket tyder på att den är central, viktig och känslig för ändringar. Hög EC innebär att en klass använder och är beroende av många andra externa klasser, vilket tyder på att klassen kan vara svår att testa och underhålla. Denna statistik är generellt nyttig för att få ett grep om vad som har stor vikt i ett projekt. Till exempel från report-projektet kan man se att "App\Card\Card" har högsta AC på 4, vilket tyder på att den har stor vikt för andra klasser. Man kan även se att App\Controller\ApiControllerKmom02 har ett högt EC vilket tyder på att denna klass är starkt beroende av andra klasser och man kanske bör fundera på om den bör vara så komplex.</li>
            <li><b>CRAP</b>. CRAP (Change Risk Anti-Pattern) är ett sammansatt index av komplexitet och täckning där man vill försöka identifiera riskabel kod. Formeln för att beräkna ett CRAP-värde är: comp^2 * (1 - coverage)^3 + comp, där comp = komplexiteten. Eftersom minsta komplexitet man kan ha är 1, så kommer det lägsta möjliga CRAP-värde enligt formeln vara 1. Generellt vill man inte hamna över 30 i CRAP-värde. Som ett exempel har GameState-klassen ett CRAP-värde på 15, där täckningen är 100%. Det betyder att det höga värdet beror på komplexiteten. </li>
        </ul>
        <h2>Phpmetrics</h2>
        <h2>Scrutinizer</h2>
        <h2>Förbättringar</h2>
        <h2>Diskussion</h2>
    </main>
{% endblock %}
